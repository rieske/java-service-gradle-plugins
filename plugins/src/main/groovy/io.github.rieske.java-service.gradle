plugins {
    id("application")
    id("com.bmuschko.docker-remote-api")
}

def dockerfile = layout.projectDirectory.file("Dockerfile")
def applicationTarArchive = tasks.named("distTar").map(AbstractArchiveTask::getArchiveFile)
def dockerContextDir = layout.buildDirectory.dir("docker")
def prepareDockerContextTask = tasks.register("prepareDockerContext", Copy) {
    into(dockerContextDir)
    from(applicationTarArchive)
    from(dockerfile)
}

def dockerTask = tasks.register("docker", com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {
    dependsOn(prepareDockerContextTask)
    inputDir.set(dockerContextDir)
    images.add("${rootProject.name}:snapshot".toString())
}

testing.suites {
    test {
        useJUnitJupiter()
    }
    blackBoxTest(JvmTestSuite) {
        targets {
            all {
                testTask.configure {
                    mustRunAfter(test)
                    dependsOn(dockerTask)
                    inputs.files(dockerfile, applicationTarArchive).withPathSensitivity(PathSensitivity.RELATIVE)
                }
            }
        }
    }
}

tasks.withType(Test).configureEach {
    testLogging.exceptionFormat = "full"
}

// Make the build reproducible - this enables caching and reusing the artifacts
tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

tasks.named("check") {
    it.dependsOn(testing.suites.blackBoxTest)
}

tasks.named("build") {
    it.dependsOn(dockerTask)
}
